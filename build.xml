<?xml version="1.0"?>

<!-- ===================================================================

   Build file for Lucene

Notes:
   This is a build file for use with the Jakarta Ant build tool.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org/

Build Instructions:
   To build, run

     java org.apache.tools.ant.Main <target>

   on the directory where this file is located with the target you want.

Most useful targets:

 - compile  -> creates the "lucene.jar" package in "build/lib"
 - javadocs -> creates the javadocs in "build/javadocs"
 - dist     -> creates the complete binary distribution

Authors:

  David Li <david@d11e.com>
  Jon S. Stevens <jon@latchkey.com>
  Brian Goetz <brian@quiotix.com>

   $Id: build.xml,v 1.12 2001/07/02 23:48:41 latchkey Exp $

==================================================================== -->

<project name="Lucene" default="jar" basedir=".">

    <!-- Give user a chance to override without editing this file
         (and without typing -D each time they invoke a target) -->
    <property file="${user.home}/build.properties"/>
    <property file="build.properties"/>

    <property name="name" value="lucene"/>
    <property name="Name" value="Lucene"/>
    <property name="version" value="1.0.1-dev"/>
    <property name="year" value="2000-2001"/>
    <property name="final.name" value="${name}-${version}"/>

    <property name="debug" value="off"/>

    <property name="src.dir" value="${basedir}"/>
    <property name="demo.dir" value="${basedir}/demo"/>
    <property name="docs.dir" value="${basedir}/doc"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="test.dir" value="${basedir}/test"/>

    <property name="dist.dir" value="${final.name}"/>

    <!-- javadoc packages -->
    <property name="packages" value="com.lucene.*"/>

    <property name="build.dir"      value="ant.build"/>
    <property name="build.classes"  value="${build.dir}/classes"/>
    <property name="build.lib"      value="${build.dir}/lib"/>
    <property name="build.javadocs" value="${build.dir}/docs/api"/>
    <property name="build.src"      value="${build.dir}/src"/>
    <property name="build.demo"     value="${build.dir}/demo"/>
    <property name="build.test"     value="${build.dir}/test"/>

    <property name="junit.src" value="${basedir}/test/unit"/>
    <property name="junit.classes" value="${build.dir}/unit-classes"/>
    <property name="junit.reports" value="${build.dir}/unit-reports"/>

    <!-- Home directory of JavaCC -->
    <property name="javacc.home" value="${basedir}"/>
    <property name="javacc.zip.dir" value="${javacc.home}/lib"/>
    <property name="javacc.zip" value="${javacc.zip.dir}/JavaCC.zip"/>

    <!-- Build classpath -->
    <path id="classpath">
        <pathelement location="${build.demo}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="."/>
        <fileset dir="lib">
          <include name="*.jar" />
        </fileset>
    </path>

    <path id="junit.classpath">
      <pathelement location="${junit.classes}" />
      <pathelement location="${build.classes}"/>
      <fileset dir="lib">
         <include name="*.jar" />
      </fileset>
      <pathelement path="${java.class.path}" />
    </path>

    <!-- ================================================================== -->
    <!-- Prepares the build directory                                       -->
    <!-- ================================================================== -->
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.src}"/>
        <available property="javacc.present" 
                   classname="COM.sun.labs.javacc.Main"
                   classpath="${javacc.zip}"/>
        <available property="junit.present" 
                   classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    </target>

    <target name="javacc_check" depends="init" 
            unless="javacc.present">
        <echo>
        ##################################################################
        JavaCC not found.  
        JavaCC Home: ${javacc.home}
        JavaCC Zip: ${javacc.zip}

        Please download and install JavaCC 2.0 from:

        &lt;http://www.webgain.com/products/metamata/java_doc.html&gt;

        Then, create a .ant.properties file either in your home
        directory, or within the Lucene directory and set the javacc.home
        property to the path where JavaCC.zip is located. For example,
        if you installed JavaCC in /usr/local/java/javacc2.0, then set the
        javacc.home property to:

        javacc.home=/usr/local/java/javacc2.0/bin/lib

        If you get an error like the one below, then you have not installed
        things correctly. Please check all your paths and try again.

        java.lang.NoClassDefFoundError: COM/sun/labs/javacc/Main
        ##################################################################
        </echo>
    </target>

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="init,javacc_check" if="javacc.present">
        <mkdir dir="${build.src}/com/lucene/analysis/standard"/>
        <javacc target="${src.dir}/com/lucene/analysis/standard/StandardTokenizer.jj" 
                javacchome="${javacc.zip.dir}"
                outputdirectory="${build.src}/com/lucene/analysis/standard"/>
        <delete file="${build.src}/com/lucene/analysis/standard/ParseException.java"/>
        <mkdir dir="${build.src}/com/lucene/queryParser"/>
        <javacc target="${src.dir}/com/lucene/queryParser/QueryParser.jj" 
                javacchome="${javacc.zip.dir}"
                outputdirectory="${build.src}/com/lucene/queryParser"/>

        <javac srcdir="${src.dir}:${build.src}" 
               includes="com/**/*.java" 
               destdir="${build.classes}" 
               debug="${debug}">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Jar the class files                                                -->
    <!-- ================================================================== -->
    <target name="jar" depends="compile" if="javacc.present">
        <jar jarfile="${build.dir}/${final.name}.jar" 
             basedir="${build.classes}"/>
    </target>

    <!-- ================================================================== -->
    <!-- Build demo                                                         -->
    <!-- ================================================================== -->
    <target name="demo" depends="compile" if="javacc.present">
        <mkdir dir="${build.demo}"/>
        <copy todir="${build.demo}">
            <fileset dir="${src.dir}">
              <include name="demo/**/*.java"/>
              <include name="demo/**/*.jj"/>
            </fileset>
        </copy>
        <javacc target="${demo.dir}/HTMLParser/HTMLParser.jj" 
                javacchome="${javacc.zip.dir}"
                outputdirectory="${build.demo}/demo/HTMLParser"/>
        <javac srcdir="${build.demo}"
               includes="demo/**/*.java"
               destdir="${build.demo}"
               debug="${debug}">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Build test                                                         -->
    <!-- ================================================================== -->
    <target name="test" depends="compile">
        <mkdir dir="${build.test}"/>
        <javac srcdir="${build.src}" includes="${test.dir}/**" 
               destdir="${build.test}" debug="${debug}">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <!-- ================================================================== -->
    <!-- Run the JUnit tests                                                -->
    <!-- ================================================================== -->

    <target name="test-unit" depends="compile" if="junit.present">
        <!-- Import JUnit task -->
        <taskdef name="junit" 
         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

        <mkdir dir="${junit.classes}"/>
        <mkdir dir="${junit.reports}"/>
        <javac srcdir="${junit.src}" includes="**/*.java" 
               destdir="${junit.classes}" debug="${debug}">
            <classpath refid="classpath"/>
        </javac>      

        <junit printsummary="yes" haltonfailure="no" >
          <classpath refid="junit.classpath"/>
          <formatter type="plain" />
          <batchtest fork="yes" todir="${junit.reports}">
            <fileset dir="${junit.src}" includes="**/Test*.java" />
          </batchtest>
        </junit>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the API documentation                                      -->
    <!-- ================================================================== -->
    <target name="javadocs" depends="compile" if="javacc.present">
        <mkdir dir="${build.javadocs}"/>
        <javadoc
            sourcepath="${build.src}" 
            packagenames="${packages}"
            destdir="${build.javadocs}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            bottom="Copyright &amp;copy; ${year} Lucene.com. All Rights Reserved."
        >
            <classpath refid="classpath"/>
        </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the binary distribution                                    -->
    <!-- ================================================================== -->
    <target name="package" depends="jar, javadocs">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/docs"/>
        <mkdir dir="${dist.dir}/docs/api"/>

        <copy file="${basedir}/COPYING.txt"
              todir="${dist.dir}">
        </copy>
        <copy file="${basedir}/README.txt"
              todir="${dist.dir}">
        </copy>
        <copy todir="${dist.dir}/docs">
            <fileset dir="${docs.dir}"/>
        </copy>
        <copy todir="${dist.dir}/docs/api">
            <fileset dir="${build.javadocs}"/>
        </copy>
        <copy file="${build.dir}/${final.name}.jar"
              todir="${dist.dir}">
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <target name="package-zip"
            depends="package"
            description="--> generates the Lucene distribution as .zip">
        <delete file="${basedir}/${final.name}.zip"/>
        <zip zipfile="${basedir}/${final.name}.zip" basedir="${basedir}/" 
             includes="**/${final.name}/**"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <target name="package-tgz"
            depends="package"
            description="--> generates the Lucene distribution as .tar.gz">
        <delete file="${basedir}/${final.name}.tar"/>
        <delete file="${basedir}/${final.name}.tar.gz"/>
        <tar tarfile="${basedir}/${final.name}.tar" basedir="${basedir}/" 
             includes="**/${final.name}/**"/>
        <gzip zipfile="${basedir}/${final.name}.tar.gz" 
                  src="${basedir}/${final.name}.tar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP and TAG-GZIP                    -->
    <!-- ================================================================== -->
    <target name="package-all"
            depends="package-zip, package-tgz"
            description="--> generates the .tar.gz and .zip distributions">
    </target>

    <!-- ================================================================== -->
    <!-- Same as package-all. It is just here for compatibility.            -->
    <!-- ================================================================== -->
    <target name="dist" depends="package-all">
    </target>

    <!-- ================================================================== -->
    <!-- Cleans everything                                                  -->
    <!-- ================================================================== -->
    <target name="clean" depends="init">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete file="${basedir}/${final.name}.tar"/>
        <delete file="${basedir}/${final.name}.tar.gz"/>
        <delete file="${basedir}/${final.name}.zip"/>
    </target>

</project>
